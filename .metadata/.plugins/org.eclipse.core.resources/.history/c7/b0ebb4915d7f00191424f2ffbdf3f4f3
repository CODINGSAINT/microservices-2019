package in.kumarpallav.learning.microservices;

import java.util.Collection;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.loadbalancer.LoadBalanced;
import org.springframework.cloud.netflix.eureka.EnableEurekaClient;
import org.springframework.cloud.netflix.zuul.EnableZuulProxy;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.hateoas.Resources;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.netflix.appinfo.InstanceInfo;
import com.netflix.discovery.DiscoveryClient;

import lombok.Getter;
import lombok.Setter;

@EnableZuulProxy
@EnableEurekaClient
@SpringBootApplication
public class ReservationClientApplication {

	public static void main(String[] args) {
		SpringApplication.run(ReservationClientApplication.class, args);
	}


}
@Getter
@Setter
class Reservation{
	private String name;
}
@Configuration
class ReservationClientConfig{
	@LoadBalanced 
	@Bean
	public RestTemplate restTemplate() {
		 return new RestTemplate();
	}
}
@RestController
@RequestMapping("reservations")
class ReservationClientController{
	@Autowired @LoadBalanced
	private RestTemplate restTempate;      
	
	@Autowired
    DiscoveryClient discoveryClient;

   
	
	@GetMapping("names")
	public Collection <String>getReservations() {
		InstanceInfo instance = discoveryClient.getNextServerFromEureka("RESERVATION-SERVICE",        false);
System.out.println(   instance.getAppName()                                               );
		ParameterizedTypeReference<Resources<Reservation>> ptr = new ParameterizedTypeReference<Resources<Reservation>>() {
		};
		ResponseEntity<Resources<Reservation>> response = restTempate
				.exchange("http://RESERVATION-SERVICE/reservations", 
						HttpMethod.GET, null, ptr);
		return response.getBody()
				.getContent()
				.stream()
				.map(Reservation::getName)
				.collect(Collectors.toList());
	}
	
}